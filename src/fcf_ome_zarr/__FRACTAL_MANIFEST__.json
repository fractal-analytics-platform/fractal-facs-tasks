{
  "manifest_version": "2",
  "task_list": [
    {
      "name": "Threshold Segmentation",
      "category": "Segmentation",
      "tags": [
        "Instance Segmentation",
        "Classical segmentation"
      ],
      "docs_info": "### Purpose\n- Segment an image using a thresholding method & size filtering.\n\n### Outputs\n- A label image\n",
      "type": "parallel",
      "executable_parallel": "threshold_segmentation_task.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "$defs": {
          "ChannelSelectionModel": {
            "description": "Model for channel selection.",
            "properties": {
              "mode": {
                "default": "label",
                "enum": [
                  "label",
                  "wavelength_id",
                  "index"
                ],
                "title": "Mode",
                "type": "string",
                "description": "Specifies how to interpret the identifier. Can be \"label\", \"wavelength_id\", or \"index\" (must be an integer)."
              },
              "identifier": {
                "title": "Identifier",
                "type": "string",
                "description": "Unique identifier for the channel. This can be a channel label, wavelength ID, or index."
              }
            },
            "required": [
              "identifier"
            ],
            "title": "ChannelSelectionModel",
            "type": "object"
          },
          "IteratorConfiguration": {
            "description": "Advanced Masking configuration.",
            "properties": {
              "masking": {
                "$ref": "#/$defs/MaskingConfiguration",
                "title": "Masking Iterator Configuration",
                "description": "If configured, the segmentation will be only saved within the mask region."
              },
              "roi_table": {
                "title": "Iterate Over ROIs",
                "type": "string",
                "description": "Name of a ROI table. If provided, the segmentation will be performed for each ROI in the specified ROI table."
              }
            },
            "title": "IteratorConfiguration",
            "type": "object"
          },
          "MaskingConfiguration": {
            "description": "Masking configuration.",
            "properties": {
              "mode": {
                "default": "Table Name",
                "enum": [
                  "Table Name",
                  "Label Name"
                ],
                "title": "Mode",
                "type": "string",
                "description": "Mode of masking to be applied. If \"Table Name\", the identifier refers to a masking table name. If \"Label Name\", the identifier refers to a label image name."
              },
              "identifier": {
                "title": "Identifier",
                "type": "string",
                "description": "Name of the masking table or label image depending on the mode."
              }
            },
            "title": "MaskingConfiguration",
            "type": "object"
          }
        },
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "URL to the OME-Zarr container"
          },
          "channel": {
            "$ref": "#/$defs/ChannelSelectionModel",
            "title": "Channel",
            "description": "Select the input channel to be used for segmentation."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "Name of the resulting label image. If not provided, it will be set to \"<channel_identifier>_thresholded\"."
          },
          "threshold": {
            "title": "Threshold",
            "type": "number",
            "description": "Threshold value to be applied."
          },
          "min_size": {
            "default": 50,
            "title": "Min Size",
            "type": "integer",
            "description": "Minimum size of objects. Smaller objects are filtered out."
          },
          "iterator_configuration": {
            "$ref": "#/$defs/IteratorConfiguration",
            "title": "Iterator Configuration",
            "description": "Advanced configuration to control masked and ROI-based iteration."
          },
          "overwrite": {
            "default": true,
            "title": "Overwrite",
            "type": "boolean",
            "description": "Whether to overwrite an existing label image. Defaults to True."
          }
        },
        "required": [
          "zarr_url",
          "channel",
          "threshold"
        ],
        "type": "object",
        "title": "ThresholdSegmentationTask"
      }
    },
    {
      "name": "FCF S8 Converter",
      "category": "Conversion",
      "tags": [
        "FACS"
      ],
      "docs_info": "### Purpose\n- Convert data from S8 Flow Cytometer (TIFF files) to OME-Zarr format.\n\n### Outputs\n- A single mosaic OME-Zarr file containing all converted images. Optionally in plate format\n\n### Limitations\n- POC implementation, only tested on a single dataset",
      "type": "converter_non_parallel",
      "executable_non_parallel": "fcf_s8_converter.py",
      "meta_non_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_non_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "tiff_folder_path": {
            "title": "Tiff Folder Path",
            "type": "string",
            "description": "Path to the folder containing the TIFF files of the S8 FACS to be converted."
          },
          "fake_a_plate": {
            "default": true,
            "title": "Fake A Plate",
            "type": "boolean",
            "description": "Whether to create a fake plate structure with a single well \"A1\" containing the mosaic image. This is useful to use some tools that need plates (e.g. Fractal feature explorer). Defaults to True."
          },
          "add_z_singleton": {
            "default": true,
            "title": "Add Z Singleton",
            "type": "boolean",
            "description": "Whether to add a singleton Z dimension to the OME-Zarr. This is useful to use some of the tools (like the Fractal feature explorer) that require Z singleton dimensions. Defaults to True."
          },
          "convert_first_x_tiffs": {
            "title": "Convert First X Tiffs",
            "type": "integer",
            "description": "If provided, only the first X TIFF files in the folder are converted. This is useful for testing with a smaller number of files. If None, all TIFF files in the folder are converted."
          },
          "xy_pixelsize": {
            "default": 1.0,
            "title": "Xy Pixelsize",
            "type": "number",
            "description": "Pixel size in the XY dimensions. If possible, we should extract this from the metadata instead."
          },
          "overwrite": {
            "default": true,
            "title": "Overwrite",
            "type": "boolean",
            "description": "Whether to overwrite an existing OME-Zarr image. Defaults to True."
          }
        },
        "required": [
          "zarr_dir",
          "tiff_folder_path"
        ],
        "type": "object",
        "title": "FcfS8Converter"
      }
    },
    {
      "name": "Region Props Features",
      "category": "Measurement",
      "tags": [
        "Region Properties",
        "Intensity",
        "Morphology"
      ],
      "docs_info": "### Purpose\n- Makes region properties measurements on label images and stores them in the OME-Zarr format.\n\n### Outputs\n- A measurements table in the OME-Zarr format.",
      "type": "parallel",
      "executable_parallel": "region_props_features_task.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 4000
      },
      "args_schema_parallel": {
        "additionalProperties": false,
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "URL to the OME-Zarr container"
          },
          "label_image_name": {
            "title": "Label Image Name",
            "type": "string",
            "description": "Name of the label image to analyze."
          },
          "output_table_name": {
            "default": "region_props_features",
            "title": "Output Table Name",
            "type": "string",
            "description": "Name for the output feature table."
          },
          "refercene_roi_table": {
            "title": "Refercene Roi Table",
            "type": "string",
            "description": "Optional ROI table for reference. If provided, it is measured which ROI from this table every object centroid is in."
          },
          "overwrite": {
            "default": true,
            "title": "Overwrite",
            "type": "boolean",
            "description": "Whether to overwrite an existing feature table. Defaults to True."
          }
        },
        "required": [
          "zarr_url",
          "label_image_name"
        ],
        "type": "object",
        "title": "RegionPropsFeaturesTask"
      }
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v2",
  "authors": "Joel Luethi"
}
